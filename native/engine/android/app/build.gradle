plugins {
    id 'com.android.application'
    id "com.quik.testpad.CustomPlugin"
}
//applovin
//apply plugin: 'applovin-quality-service'
//applovin {
//    apiKey "123"
//}


RES_PATH = RES_PATH.replace("\\", "/")
COCOS_ENGINE_PATH = COCOS_ENGINE_PATH.replace("\\", "/")

buildDir = "${RES_PATH}/proj/build/${project.name ==~ /^[_a-zA-Z0-9-]+$/ ? project.name : 'CocosGame'}"
android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion PROP_BUILD_TOOLS_VERSION
    ndkPath PROP_NDK_PATH
    namespace APPLICATION_ID

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId APPLICATION_ID
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    sourceSets.main {
        java.srcDirs "../src", "src"
        res.srcDirs "../res", "${RES_PATH}/proj/res"
        jniLibs.srcDirs "../libs", 'libs'
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "${RES_PATH}/data"
        jniLibs {}
    }

    signingConfigs {
       release {
            if (project.hasProperty("RELEASE_STORE_FILE") && !RELEASE_STORE_FILE.isEmpty()) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            if (!Boolean.parseBoolean(PROP_IS_DEBUG)) {
                getIsDefault().set(true)
            }
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
        }
    }
//    dynamicFeatures = [':features:yandex']
//    dynamicFeatures = [':features:admob']
//    dynamicFeatures = [':features:applovin']
    dynamicFeatures = [':features:facebook']
//    dynamicFeatures = [':features:google_auth']
//    dynamicFeatures = [':features:google']
//    dynamicFeatures = [':features:test1']

}

dependencies {
    implementation fileTree(dir: '../libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: "${COCOS_ENGINE_PATH}/cocos/platform/android/java/libs", include: ['*.jar'])

    api 'com.google.android.play:feature-delivery:2.1.0'
    implementation 'androidx.multidex:multidex:+'
    implementation 'androidx.fragment:fragment:1.5.7'   //要显式引入，不然第三方sdk用的是fragment:1.0.0与动态包里的第三方fragment:1.5.7冲突
    implementation 'androidx.work:work-runtime:2.7.0'   //要显式引入，不然第三方sdk用的是fragment:1.0.0与动态包里的第三方fragment:1.5.7冲突
    implementation 'com.blankj:utilcodex:1.31.0'

    def lifecycle_version = "2.5.1"
//    api "androidx.lifecycle:lifecycle-extensions:$lifecycle_version" //2.2.0后已经没有这个包，拆散到其他包里
    api "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
//    api "com.google.android.gms:play-services-base:18.5.0"
//    implementation 'com.android.tools.build:gradle:8.5.0'
}

project.afterEvaluate {
    android.applicationVariants.every {variant ->
        variant.outputs.each { output ->
            def task = output.processManifestProvider.get()
            task.doLast {
            }
        }
    }
}